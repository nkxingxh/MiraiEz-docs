import{_ as d,M as l,p as o,q as i,R as t,N as e,t as a,a1 as s}from"./framework-96b046e1.js";const p={},r=s(`<h1 id="插件增强库" tabindex="-1"><a class="header-anchor" href="#插件增强库" aria-hidden="true">#</a> 插件增强库</h1><h3 id="写入日志" tabindex="-1"><a class="header-anchor" href="#写入日志" aria-hidden="true">#</a> 写入日志</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$module</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$logfilename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>content</td><td>string</td><td>false</td><td>日志内容</td></tr><tr><td>module</td><td>string</td><td>true</td><td>模块名称</td></tr><tr><td>logfilename</td><td>string</td><td>true</td><td>日志文件名 (留空为当前插件包名, 不需要加 .log)</td></tr><tr><td>level</td><td>int</td><td>true</td><td>日志级别 (1 DEBUG, 2 INFO, 3 WARN, 4 ERROR, 5 FATAL)</td></tr></tbody></table><p><strong>无返回值</strong></p><h3 id="读取配置文件" tabindex="-1"><a class="header-anchor" href="#读取配置文件" aria-hidden="true">#</a> 读取配置文件</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token variable">$configFile</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>configFile</td><td>string</td><td>true</td><td>配置文件名 (留空为当前插件包名, 不需要加拓展名)</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>array</code> JSON 解码后的配置文件内容，如果配置文件为空或不存在则返回空数组。</p><h3 id="写入配置文件" tabindex="-1"><a class="header-anchor" href="#写入配置文件" aria-hidden="true">#</a> 写入配置文件</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">saveConfig</span><span class="token punctuation">(</span><span class="token variable">$configFile</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token variable">$config</span><span class="token punctuation">,</span> <span class="token variable">$jsonEncodeFlags</span> <span class="token operator">=</span> <span class="token constant">JSON_UNESCAPED_UNICODE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>configFile</td><td>string</td><td>true</td><td>配置文件名 (留空为当前插件包名, 不需要加拓展名)</td></tr><tr><td>config</td><td>array</td><td>false</td><td>配置内容 (要求能被 JSON 编码)</td></tr><tr><td>jsonEncodeFlags</td><td>int</td><td>true</td><td>json_encode flags</td></tr></tbody></table><p><strong>返回值</strong></p><p><code>bool</code> 成功为 true, 失败为 false</p><h3 id="获取前置插件类" tabindex="-1"><a class="header-anchor" href="#获取前置插件类" aria-hidden="true">#</a> 获取前置插件类</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>只需要使用前置插件中的<strong>常量或静态函数</strong>时，可以使用此函数获取插件类而无需实例化。使用 <code>::</code> 静态调用即可。 <em>例如 plugin_getFrontClass(&#39;top.nkxingxh.examplePlugin&#39;)::func()</em></p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">plugin_getFrontClass</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$package</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>package</td><td>string</td><td>false</td><td>要实例化插件类的插件包名</td></tr></tbody></table><p><strong>返回值</strong></p>`,20),c=t("code",null,"string",-1),u=t("code",null,"bool",-1),h=t("code",null,"null",-1),g=s(`<h3 id="实例化前置插件对象" tabindex="-1"><a class="header-anchor" href="#实例化前置插件对象" aria-hidden="true">#</a> 实例化前置插件对象</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">plugin_loadFrontObject</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$package</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$init_args</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>package</td><td>string</td><td>false</td><td>要实例化插件类的插件包名</td></tr><tr><td>init_args</td><td>any</td><td>true</td><td>这些参数将传给插件类的构造函数用于初始化</td></tr></tbody></table><p><strong>返回值</strong></p>`,4),b=t("code",null,"object",-1),k=t("code",null,"bool",-1),v=t("code",null,"null",-1),m=s(`<h3 id="获取插件列表" tabindex="-1"><a class="header-anchor" href="#获取插件列表" aria-hidden="true">#</a> 获取插件列表</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">pluginsList</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$provide_infos</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>provide_infos</td><td>bool</td><td>true</td><td>是否提供插件信息 (插件名、作者等)。默认只提供插件包名与版本</td></tr></tbody></table><p><strong>返回值</strong></p>`,4),_=t("code",null,"array",-1),y=t("code",null,"null",-1),f=s(`<h3 id="判断插件是否成功加载" tabindex="-1"><a class="header-anchor" href="#判断插件是否成功加载" aria-hidden="true">#</a> 判断插件是否成功加载</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">plugin_isLoaded</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$package</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>package</td><td>string</td><td>false</td><td>目标插件包名</td></tr></tbody></table><p><strong>返回值</strong></p>`,4),x=t("code",null,"bool",-1),w=t("code",null,"bool",-1),$=t("code",null,"null",-1),F=s(`<h3 id="获取插件信息" tabindex="-1"><a class="header-anchor" href="#获取插件信息" aria-hidden="true">#</a> 获取插件信息</h3><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">plugin_getInfo</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$package</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token operator">?</span><span class="token keyword return-type">array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>package</td><td>string</td><td>false</td><td>目标插件包名</td></tr></tbody></table><p><strong>返回值</strong></p>`,4),N=t("code",null,"array",-1),A=t("code",null,"null",-1),E=s(`<h3 id="获取当前插件包名" tabindex="-1"><a class="header-anchor" href="#获取当前插件包名" aria-hidden="true">#</a> 获取当前插件包名</h3><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这个函数一般是供本框架的函数判断当前插件所用，在插件开发中请直接使用 <code>self::_pluginPackage</code> 来获取当前插件包名。</p></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">plugin_whoami</span><span class="token punctuation">(</span><span class="token keyword type-hint">bool</span> <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token constant">MIRAIEZ_PLUGINS_WHOAMI_BACKTRACE</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>backtrace</td><td>bool</td><td>true</td><td>是否使用 debug_backtrace 获取堆栈以取得准确的插件包名</td></tr></tbody></table><div class="custom-container warning"><p class="custom-container-title">注意</p><p>不使用 debug_backtrace 方法时，将无法准确取得<strong>被其他插件调用的前置插件</strong>的包名。 <em>例如在插件 A 中实例化插件 B，插件 B 的方法 F() 中使用了 plugin_whoami()，此时在插件 A 中调用插件 B 的 F() 方法，该方法中的 plugin_whoami() 获取到的将是插件 A 的包名</em></p></div><div class="custom-container tip"><p class="custom-container-title">性能</p><p>使用 debug_backtrace 的方法获取当前插件包名，可以避免上述情况，但是所需时间约为不使用 debug_backtrace 方法的 6 倍。 <em>在 E5-2698 V3 的机器上，运行 1000000 次所需时间分别为 3.0328s 与 0.4818s</em></p></div><p><strong>返回值</strong></p>`,7),B=t("code",null,"object",-1),C=t("code",null,"bool",-1),O=t("code",null,"null",-1);function I(R,j){const n=l("Badge");return o(),i("div",null,[r,t("ul",null,[t("li",null,[e(n,{type:"tip",text:"成功",vertical:"middle"}),a(),c,a(" 插件类名")]),t("li",null,[e(n,{type:"warning",text:"失败",vertical:"middle"}),a(),u,a(" 该插件不是一个前置插件返回 false")]),t("li",null,[e(n,{type:"danger",text:"失败",vertical:"middle"}),a(),h,a(" 插件不存在")])]),g,t("ul",null,[t("li",null,[e(n,{type:"tip",text:"成功",vertical:"middle"}),a(),b,a(" 插件对象")]),t("li",null,[e(n,{type:"warning",text:"失败",vertical:"middle"}),a(),k,a(" 该插件不是一个前置插件返回 false")]),t("li",null,[e(n,{type:"danger",text:"失败",vertical:"middle"}),a(),v,a(" 插件不存在")])]),m,t("ul",null,[t("li",null,[e(n,{type:"tip",text:"成功",vertical:"middle"}),a(),_,a(" 插件列表")]),t("li",null,[e(n,{type:"danger",text:"失败",vertical:"middle"}),a(),y,a(" 未加载插件或框架异常")])]),f,t("ul",null,[t("li",null,[e(n,{type:"tip",text:"成功",vertical:"middle"}),a(),x,a(" 插件成功加载返回 true")]),t("li",null,[e(n,{type:"warning",text:"失败",vertical:"middle"}),a(),w,a(" 插件未启用或加载失败返回 false")]),t("li",null,[e(n,{type:"danger",text:"失败",vertical:"middle"}),a(),$,a(" 插件不存在")])]),F,t("ul",null,[t("li",null,[e(n,{type:"tip",text:"成功",vertical:"middle"}),a(),N,a(" 插件信息")]),t("li",null,[e(n,{type:"danger",text:"失败",vertical:"middle"}),a(),A,a(" 插件不存在")])]),E,t("ul",null,[t("li",null,[e(n,{type:"tip",text:"成功",vertical:"middle"}),a(),B,a(" 插件对象")]),t("li",null,[e(n,{type:"warning",text:"失败",vertical:"middle"}),a(),C,a(" 该插件不是一个前置插件返回 false")]),t("li",null,[e(n,{type:"danger",text:"失败",vertical:"middle"}),a(),O,a(" 插件不存在")])])])}const q=d(p,[["render",I],["__file","pluginsHelp.html.vue"]]);export{q as default};
