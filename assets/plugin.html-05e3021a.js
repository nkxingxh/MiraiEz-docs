import{_ as l,M as i,p as c,q as d,R as n,t as s,N as a,V as e,a1 as o}from"./framework-96b046e1.js";const r={},u=o(`<h1 id="插件基础" tabindex="-1"><a class="header-anchor" href="#插件基础" aria-hidden="true">#</a> 插件基础</h1><p>本章节将带你了解 MiraiEz 的基本插件机制与插件编写方法。</p><h2 id="匿名类插件对象" tabindex="-1"><a class="header-anchor" href="#匿名类插件对象" aria-hidden="true">#</a> 匿名类插件对象</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">pluginRegister</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">extends</span> <span class="token class-name">pluginParent</span>
<span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">_pluginName</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;examplePlugin&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">_pluginAuthor</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;nkxingxh&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">_pluginDescription</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;示例插件&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">_pluginPackage</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;top.nkxingxh.examplePlugin&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">_pluginVersion</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;1.2.0&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token function">hookRegister</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;hook&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;FriendMessage&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;GroupMessage&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hook</span><span class="token punctuation">(</span><span class="token variable">$_DATA</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">global</span> <span class="token variable">$_PlainText</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_PlainText</span> <span class="token operator">==</span> <span class="token string double-quoted-string">&quot;/ping&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">replyMessage</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;pong&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件注册" tabindex="-1"><a class="header-anchor" href="#插件注册" aria-hidden="true">#</a> 插件注册</h2><p>使用 <code>pluginRegister</code> 函数注册一个插件对象。</p><p><strong>定义</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">pluginRegister</span><span class="token punctuation">(</span><span class="token variable">$pluginClass</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>pluginClass</td><td>Class</td><td>false</td><td>要注册的插件对象</td></tr></tbody></table><h2 id="插件基本信息" tabindex="-1"><a class="header-anchor" href="#插件基本信息" aria-hidden="true">#</a> 插件基本信息</h2><p>每个插件需要包含一些基本信息常量，具体定义如下</p><table><thead><tr><th>常量名</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>_pluginName</td><td>插件显示名称</td><td></td></tr><tr><td>_pluginAuthor</td><td>插件作者</td><td></td></tr><tr><td>_pluginDescription</td><td>插件描述</td><td></td></tr><tr><td>_pluginPackage</td><td>插件包名</td><td>必须是唯一的 (如已加载相同包名的插件，将跳过)</td></tr><tr><td>_pluginVersion</td><td>插件版本</td><td>「PHP 规范化」的版本数字字符串 (例如: 1.0.0, 1.0.1, 1.0.2, ...)</td></tr></tbody></table><h2 id="初始化函数" tabindex="-1"><a class="header-anchor" href="#初始化函数" aria-hidden="true">#</a> 初始化函数</h2><p>在插件对象内定义 <code>_init</code> 公有函数，用于初始化插件。</p><p><strong>定义</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="挂钩注册" tabindex="-1"><a class="header-anchor" href="#挂钩注册" aria-hidden="true">#</a> 挂钩注册</h2><p>如果你想要插件处理某种消息或事件类型，你需要在<a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%87%BD%E6%95%B0"><strong>初始化函数</strong></a>中使用 <code>hookRegister</code> 挂钩相应的<a href="#%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0">处理函数</a>。</p><p><strong>定义</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token function">hookRegister</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token variable">$types</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>可选</th><th>说明</th></tr></thead><tbody><tr><td>func</td><td>mixed</td><td>false</td><td>要注册的 方法名 (必须是<strong>公有</strong>方法) 或 匿名函数 (Closure)</td></tr><tr><td>types</td><td>string</td><td>false</td><td>要挂钩的消息或事件类型 (可传入多个)</td></tr></tbody></table><p><strong>上报类型</strong></p>`,22),h={href:"https://github.com/project-mirai/mirai-api-http/blob/master/docs/api/MessageType.md",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/project-mirai/mirai-api-http/blob/master/docs/api/EventType.md",target:"_blank",rel:"noopener noreferrer"},g=o(`<h2 id="处理函数" tabindex="-1"><a class="header-anchor" href="#处理函数" aria-hidden="true">#</a> 处理函数</h2><p>在插件类内定义<strong>公有</strong>函数或直接注册匿名函数 (Closure)，用于处理注册的消息与事件。</p><p><em>下面以函数名 hook 为例进行展示</em></p><p><strong>定义</strong></p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">hook</span><span class="token punctuation">(</span><span class="token variable">$_DATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>_DATA</td><td>Array</td><td>webhook 上报的完整数据 (已解码 JSON)</td></tr></tbody></table><p><strong>返回</strong></p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>请小心地使用<strong>拦截</strong>这一特性，这可能会导致其他插件或处理函数无法按预期完成其任务。</p></div><ul><li>返回 <code>(int) 1</code> 拦截当前消息或事件，将不再继续执行其他 <strong>hook 处理函数</strong> (包括其他插件的)。</li><li>返回其他值无特殊效果。</li></ul><h2 id="可读取的全局变量" tabindex="-1"><a class="header-anchor" href="#可读取的全局变量" aria-hidden="true">#</a> 可读取的全局变量</h2><p>为了便于插件的开发，有一些预处理过的数据存储在全局变量中。你可以在插件中调用以方便开发，但是不要修改这些全局变量的值。</p>`,11),v=n("thead",null,[n("tr",null,[n("th",null,"全局变量"),n("th",null,"类型"),n("th",null,"说明")])],-1),b=n("td",null,"_PlainText",-1),m=n("td",null,"string",-1),_=n("td",null,"_ImageUrl",-1),E=n("td",null,"array",-1),f=n("td",null,"_At",-1),y=n("td",null,"array",-1),B=o(`<h2 id="前置插件" tabindex="-1"><a class="header-anchor" href="#前置插件" aria-hidden="true">#</a> 前置插件</h2><p>如果你想把你的插件作为前置库提供给其他插件使用，则需要在插件类定义中增加一个常量。</p><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">const</span> _pluginFrontLib <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>前置插件与一般插件并无太大的区别，大部分一般插件支持的功能在前置插件上也支持。</p>`,4),x={class:"custom-container tip"},w=n("p",{class:"custom-container-title"},"前置插件开发建议",-1),A=n("code",null,"plugin_whoami()",-1);function q(C,D){const p=i("ExternalLinkIcon"),t=i("RouterLink");return c(),d("div",null,[u,n("ul",null,[n("li",null,[n("a",h,[s("消息类型"),a(p)])]),n("li",null,[n("a",k,[s("事件类型"),a(p)])])]),g,n("table",null,[v,n("tbody",null,[n("tr",null,[b,m,n("td",null,[a(t,{to:"/manual/easyMirai.html#%E8%8E%B7%E5%8F%96%E6%B6%88%E6%81%AF%E9%93%BE%E4%B8%AD%E7%9A%84%E6%96%87%E6%9C%AC"},{default:e(()=>[s("messageChain2PlainText")]),_:1}),s(" 函数处理得到的当前上报消息的文本内容 (仅支持上报类型为消息)")])]),n("tr",null,[_,E,n("td",null,[a(t,{to:"/manual/easyMirai.html#%E8%8E%B7%E5%8F%96%E6%B6%88%E6%81%AF%E9%93%BE%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80"},{default:e(()=>[s("messageChain2ImageUrl")]),_:1}),s(" 函数处理得到的当前上报消息的图片地址数组 (仅支持上报类型为消息)")])]),n("tr",null,[f,y,n("td",null,[a(t,{to:"/manual/easyMirai.html#%E8%8E%B7%E5%8F%96%E6%B6%88%E6%81%AF%E9%93%BE%E4%B8%AD%E7%9A%84-At"},{default:e(()=>[s("messageChain2At")]),_:1}),s(" 函数处理得到的当前上报消息中被@的QQ号数组 (仅支持上报类型为消息)")])])])]),B,n("p",null,[s("与一般插件不同的是，前置插件类不会在执行完挂钩函数后被释放，并且其他插件可以"),a(t,{to:"/manual/pluginsHelp.html#%E5%AE%9E%E4%BE%8B%E5%8C%96%E5%89%8D%E7%BD%AE%E6%8F%92%E4%BB%B6%E5%AF%B9%E8%B1%A1"},{default:e(()=>[s("实例化前置插件对象")]),_:1}),s("。")]),n("div",x,[w,n("p",null,[s("在前置插件中调用 writeLog、getConfig、saveConfig 等函数时，请不要将文件名留空 (即不要留空让这些函数自动获取插件包名)。具体原因请看 "),a(t,{to:"/manual/pluginsHelp.html#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%8F%92%E4%BB%B6%E5%8C%85%E5%90%8D"},{default:e(()=>[A,s(" 方法注意事项")]),_:1})])])])}const P=l(r,[["render",q],["__file","plugin.html.vue"]]);export{P as default};
